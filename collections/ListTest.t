include "Collections.t"
include "BasicString.t"

% Set window to display text in a helpful manner
View.Set ("text:80;120;title:Lists Test")

const MAX:int:=50

% Answers while adding characters to the list
var answers : array 1 .. MAX of string := init (
	"{' '}",
	"{' ','!'}",
	"{' ','!','\"'}",
	"{' ','!','\"','#'}",
	"{' ','!','\"','#','$'}",
	"{' ','!','\"','#','$','%'}",
	"{' ','!','\"','#','$','%','&'}",
	"{' ','!','\"','#','$','%','&','''}",
	"{' ','!','\"','#','$','%','&',''','('}",
	"{' ','!','\"','#','$','%','&',''','(',')'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',','}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','='}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I','J'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I','J','K'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I','J','K','L'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I','J','K','L','M'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I','J','K','L','M','N'}",
	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O'}",


	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P'}",


	"{' ','!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q'}"
	)

% Answers to be used while removing things from the list
var removeOrder : array 1 .. MAX of int
for i : 1 .. MAX
	removeOrder ( i ) := MAX-i+1
end for
removeOrder ( 1 ) := 1

var answers2 : array 1 .. MAX of string := init (
	"{}",
	"{'!'}",
	"{'!','\"'}",
	"{'!','\"','#'}",
	"{'!','\"','#','$'}",
	"{'!','\"','#','$','%'}",
	"{'!','\"','#','$','%','&'}",
	"{'!','\"','#','$','%','&','''}",
	"{'!','\"','#','$','%','&',''','('}",
	"{'!','\"','#','$','%','&',''','(',')'}",
	"{'!','\"','#','$','%','&',''','(',')','*'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',','}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','='}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I','J'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I','J','K'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I','J','K','L'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I','J','K','L','M'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I','J','K','L','M','N'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P'}",
	"{'!','\"','#','$','%','&',''','(',')','*','+',',','-','.','/','0','1','2','3','4','5','6','7','8','9',':',';','<','=','>','?','@','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q'}"
	)


proc testList (var list : ^List, iterRemove : boolean)
	if iterRemove then
		put "  Testing list; removing elements using an iterator"
	else
		put "  Testing list; removing elements using interface methods"
	end if
	var dummy : boolean
	var dummyElem : ^Element
	var elem : BasicStringPtr

	for i : 1 .. MAX
		new elem
		elem -> assignValue (chr (i + 31))
		dummy := list -> add (elem)

		assert list -> toString () = answers (i)
		assert list -> size () = i
		%put "isEmpty=", list -> isEmpty (), "; size=", list -> size ()
	end for

	%put "List = ", list -> toString ()

	%var listEntry : StringElementPtr := cheat ( StringElementPtr, list->retrieve(25) )    % This would be a cast
	%put listEntry->myString

	if iterRemove then
		var iter : ^Iterator := list -> iterator ()
		dummyElem := iter -> next ()
		var i : int := 0
		loop
			i += 1
			exit when not iter -> hasNext ()

			%put iter->next()->toString()
			dummyElem := iter -> remove (false)
			assert list -> size () = MAX - i
		end loop
		%put ""

	else
		for i : 1 .. MAX
			dummyElem := list -> removeAt (removeOrder (i))

			assert list -> toString () = answers2 (MAX - i + 1)
			assert list -> size () = MAX - i
		end for
	end if
end testList


var list : ^List


put ""
put "=========================================================================="
put "ArrayList : "
new ArrayList, list
list -> construct ()
testList (list, false)
testList (list, true)
put "----------------------------------"
put "\t\tPASS"
list -> destroy ()
free list

put ""
put "=========================================================================="
put "LinkedList : "
new LinkedList, list
list -> construct ()
testList (list, false)
testList (list, true)
put "----------------------------------"
put "\t\tPASS"
list -> destroy ()
free list

put ""
put "=========================================================================="
put "DLinkedList : "
new DLinkedList, list
list -> construct ()
testList (list, false)
testList (list, true)
put "----------------------------------"
put "\t\tPASS"
list -> destroy ()
free list
